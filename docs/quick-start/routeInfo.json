{"template":"/Users/tainguyen/neo-one/packages/neo-one-website/src/pages/docs","sharedHashesByProp":{},"data":{"current":"/docs/quick-start","title":"Quick Start","content":{"type":"markdown","value":"\n::: warning\n\nImportant\n\nThis page is intended to guide you through a quick setup to develop, test, and deploy your smart contract. We assume you have a general knowledge of blockchain, smart contract development, and TypeScript.\n\n:::\n\n::: warning\n\nTip\n\n- If you want to learn the concepts from the ground up and learn by doing, check out our [Tutorial](/tutorial) and reference the concepts listed in [Docs](/docs/hello-world) when something is not clear.\n\n- If you want to learn with a real-world example, check out our [Course](/course) which you can follow and see how things are tested. Also keep the [Docs](/docs/hello-world) page handy for reference.\n\n:::\n\n**NEO•ONE** makes coding, testing and deploying Neo dapps easy, fast, efficient and enjoyable.\n\n---\n\n[[toc]]\n\n---\n\n## Installations\n\n1. Install [NodeJS](https://nodejs.org) >= 10.16.0 (Latest version recommended)\n\n   - Linux and Mac: [Node Version Manager](https://github.com/creationix/nvm). (`recommended`)\n   - Windows: We recommend using [Chocolatey](https://chocolatey.org/). (`recommended`)\n\n2. Follow the [installation instructions for Create React App](https://reactjs.org/docs/create-a-new-react-app.html#create-react-app) to make a new project.\n\n   - Be sure to invoke Create React App with the `--template typescript` in order to enable TypeScript support: `npx create-react-app token --template typescript`\n\n3. Install NEO•ONE using either [yarn](https://yarnpkg.com/) or [npm](https://www.npmjs.com/)\n\n```bash\nyarn add @neo-one/suite\n```\n\n```bash\nnpm install @neo-one/suite\n```\n\nAlternatively, install the individual packages `@neo-one/suite` wraps for you:\n\n```bash\nyarn add @neo-one/cli @neo-one/client @neo-one/smart-contract @neo-one/smart-contract-test @neo-one/smart-contract-lib @neo-one/smart-contract-typescript-plugin\n```\n\n```bash\nnpm install @neo-one/cli @neo-one/client @neo-one/smart-contract @neo-one/smart-contract-test @neo-one/smart-contract-lib @neo-one/smart-contract-typescript-plugin\n```\n\n4. Run `yarn neo-one init` or `npx neo-one init`\n\nThe command above generates a sample `HelloWorld.ts` smart contract, a sample test for the contract `HelloWorld.test.ts`, a config file `.neo-one.config.ts`, and a `neo-one` folder with important modules.\n\n---\n\n## A Contract in NEO•ONE\n\nEvery NEO•ONE smart contract starts with a TypeScript source file that exports a single [class](https://www.typescriptlang.org/docs/handbook/classes.html) extending `SmartContract`.\n\n```typescript\nimport { SmartContract } from '@neo-one/smart-contract';\n\n// Token is the contract name\nexport class Token extends SmartContract {\n  public readonly mutableSupply: Fixed<8> = 0;\n\n  //\n  @constant\n  public get totalSupply(): Fixed<8> {\n    return this.mutable;\n  }\n}\n```\n\n::: warning\n\nNote\n\n- Types for smart contract development can be imported from `@neo-one/smart-contract`\n\n- Types for testing can be imported from `@neo-one/client`\n\n:::\n\n---\n\n## A Test in NEO•ONE\n\nRun the tests using `yarn test` OR `npm test`. It's a convention to put smart contract tests under `src/__tests__/`, e.g. `src/__tests__/Token.test.ts`.\n\n```typescript\n/**\n * @jest-environment node\n */\nimport { withContracts } from '../neo-one/test';\n\ndescribe('Token', () => {\n  test('exists', async () => {\n    // \"token\" is the contract name\n    await withContracts(async ({ token }) => {\n      expect(token).toBeDefined();\n    });\n  });\n});\n```\n\n::: warning\n\nNote\n\n`withContracts()` is a generated helper that will expose all your contracts, their methods and properties along with other useful options. See [Testing](docs/testing) for more details.\n\n:::\n\n---\n\n## Quick Commands\n\n### Build\n\n```bash\nyarn neo-one build\n```\n\nRun `yarn neo-one build` when you are done making changes to the contract(s). It not only builds the necessary code for the contract(s) but also updates the generated types and helpers. Specifically the command will:\n\n1. Start up a local private Neo network (if one has not already been started).\n2. Setup wallets for testing with various amounts of NEO and GAS.\n3. Compile the project's smart contract(s).\n4. Deploy the smart contracts to the private Neo network.\n5. Generate code for use in your decentralized app.\n\n### Test\n\nRun your tests with:\n\n```bash\nyarn test\n```\n\nor\n\n```bash\nnpm test\n```\n\n::: warning\n\nNote\n\nFor more command line help and options, check out the [CLI](/docs/cli) page.\n\n:::\n\n---\n\n## Client Integration\n\nIntegrating the NEO•ONE client APIs in a vanilla JavaScript or TypeScript application is very simple - assuming we have a contract called `Token` and we’re in the `src/index.ts` file using the default NEO•ONE toolchain paths:\n\n```typescript\nimport { createClient, createTokenSmartContract } from './neo-one';\n\nconst client = createClient();\nconst token = createTokenSmartContract(client);\n// \"Token\" is the name of this example smart contract\n// for example:\n// if your contract name is Test\n// then the function will become createTestSmartContract()\n```\n\nCheck out our [Client APIs](/docs/client-apis) page for more details.\n\n---\n\n## Deploy\n\n### Checklist before deploying to TestNet:\n\n1. Get a Neo wallet\n2. Get TestNet GAS in your wallet\n3. Create a migration file\n\nYou first need a wallet, the wallet's private key and sufficient GAS to deploy.\n\n### Wallet set-up:\n\n1. Go to `https://neotracker.io/`\n2. Go to `“Wallet”` tab.\n3. Click on `“New Wallet”`.\n4. Enter a password (make sure you save this password), which is used to unlock the wallet later.\n5. Click on `\"Download Encrypted Key\"` (this will generate a `.txt` file that can be used to unlock your wallet via `“Keystore File”` option).\n6. Save the private key somewhere secure.\n7. Click `Continue` to view your wallet.\n8. (Optional) Generate a PDF of your wallet by clicking on `“Print paper wallet”`\n9. (Optional) Scroll down to `“Details”` when viewing your wallet to access the options of the previous steps (such as to view your private key or download a keystore file).\n\n### Migration File:\n\nCreate a `migration.ts` (`migration.js` if using JS) at the path specified in your NEO•ONE configuration file.\n\n::: warning\n\nTip\n\nVisual Studio Code might display single child folders in \"compact form\" and prevent you from creating a new file under `neo-one` folder. Disable \"compact folder\" in \"settings\" if needed.\n\n:::\n\nExample:\n\n```typescript\nimport { MigrationContracts } from '../src/neo-one';\n\nexport default ({ token, ico, escrow }: MigrationContracts, _network: string) => {\n  token.deploy();\n};\n```\n\n::: warning\n\nNote\n\nFor more details on deployment specifics and migration files, check out the [Deployment](/docs/deployment) page.\n\n:::\n\n### Get Test coins\n\nYou can get test coins automatically from https://neowish.ngd.network/\n\nLimited to 1000 NEO and 1000 GAS per day.\n\nIf you need more than that. You must apply through Neo website. Please follow the instructions here: https://docs.neo.org/docs/en-us/network/testnet.html#applying-for-test-coin-from-neo-website\n\n::: warning\n\nNote\n\n- It costs about 500 GAS to deploy a simple contract. Checkout [System Fees](https://docs.neo.org/docs/en-us/sc/fees.html) for more details.\n- You should then be able to see the assets in your wallet at https://testnet.neotracker.io\n\n:::\n\n### Deploy to TestNet:\n\n```bash\nyarn neo-one deploy\n```\n\n### Deploy to MainNet (or others):\n\n```bash\nyarn neo-one deploy --network <network>\n```\n\nWhere `network` is one of the keys provided by your configuration (`.neo-one.config.ts`) under the `networks` property. By default `neo-one deploy` will use the `test` key.\n\n::: warning\n\nNote\n\nWe **HIGHLY** recommend deploying to both a local private network and the Neo TestNet before attempting to deploy to the MainNet.\n\n:::\n\n## Explore with NEO Tracker\n\nIf your deployment to the TestNet was successful you should be able to find your contract at https://testnet.neotracker.io/browse/contract/1.\n"},"link":"packages/neo-one-website/docs/0-installation/0-quick-start.md","sidebar":[{"title":"Installation","numbered":false,"subsections":[{"title":"Quick Start","slug":"/docs/quick-start"},{"title":"Getting Started","slug":"/docs/getting-started"},{"title":"Environment Setup","slug":"/docs/environment-setup"},{"title":"CLI","slug":"/docs/cli"},{"title":"Playground","slug":"/docs/playground"}]},{"title":"Main Concepts","numbered":true,"subsections":[{"title":"Hello World","slug":"/docs/hello-world"},{"title":"Blockchain Basics","slug":"/docs/blockchain-basics"},{"title":"Smart Contract Basics","slug":"/docs/smart-contract-basics"},{"title":"Standard Library","slug":"/docs/standard-library"},{"title":"Properties and Storage","slug":"/docs/properties-and-storage"},{"title":"Methods","slug":"/docs/methods"},{"title":"Events and Logs","slug":"/docs/events-and-logs"},{"title":"Calling Smart Contracts","slug":"/docs/calling-smart-contracts"},{"title":"Client APIs","slug":"/docs/client-apis"},{"title":"Smart Contract APIs","slug":"/docs/smart-contract-apis"},{"title":"Testing","slug":"/docs/testing"},{"title":"Decentralized Apps","slug":"/docs/dapps"},{"title":"Deployment","slug":"/docs/deployment"}]},{"title":"Advanced Guides","numbered":false,"subsections":[{"title":"Native Assets","slug":"/docs/native-assets"},{"title":"Forward Values","slug":"/docs/forward-values"},{"title":"User Accounts","slug":"/docs/user-accounts"},{"title":"Extended Client APIs","slug":"/docs/extended-client-apis"},{"title":"Raw Client APIs","slug":"/docs/Raw-client-apis"},{"title":"React","slug":"/docs/react"},{"title":"Angular","slug":"/docs/angular"},{"title":"Vue","slug":"/docs/vue"},{"title":"dAPI Support","slug":"/docs/dapi-support"},{"title":"Configuration Options","slug":"/docs/config-options"}]},{"title":"Node","numbered":false,"subsections":[{"title":"Local Docker Development","slug":"/docs/node-docker"},{"title":"Kubernetes","slug":"/docs/node-kubernetes"},{"title":"Docker Compose","slug":"/docs/node-compose"},{"title":"Building From Source","slug":"/docs/node-source"},{"title":"Heroku Deployment","slug":"/docs/node-heroku"},{"title":"Configuration Reference","slug":"/docs/node-configuration"}]},{"title":"Contributing","numbered":false,"subsections":[{"title":"How to Contribute","slug":"/docs/how-to-contribute"},{"title":"Codebase Overview","slug":"/docs/codebase-overview"},{"title":"Smart Contract Compiler","slug":"/docs/smart-contract-compiler"},{"title":"Code of Conduct","slug":"/docs/code-of-conduct"}]}],"next":{"slug":"/docs/getting-started","title":"Getting Started"}},"path":"docs/quick-start"}
